package ru.hh.nab.telemetry.jdbc.internal;

import io.opentelemetry.instrumentation.api.instrumenter.Instrumenter;
import io.opentelemetry.instrumentation.jdbc.internal.OpenTelemetryConnection;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import ru.hh.nab.telemetry.jdbc.internal.model.NabDbInfo;
import ru.hh.nab.telemetry.jdbc.internal.model.NabDbRequest;

public class NabTelemetryConnection extends OpenTelemetryConnection {

  private final Connection delegate;
  private final NabDbInfo nabDbInfo;
  private final Instrumenter<NabDbRequest, Void> nabInstrumenter;

  public NabTelemetryConnection(
      Connection delegate,
      NabDbInfo nabDbInfo,
      Instrumenter<NabDbRequest, Void> statementInstrumenter
  ) {
    super(delegate, nabDbInfo.getDbInfo(), null);
    this.delegate = delegate;
    this.nabDbInfo = nabDbInfo;
    nabInstrumenter = statementInstrumenter;
  }

  @Override
  public Statement createStatement() throws SQLException {
    Statement statement = delegate.createStatement();
    return new NabTelemetryStatement<>(statement, nabDbInfo, nabInstrumenter);
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    Statement statement = delegate.createStatement(resultSetType, resultSetConcurrency);
    return new NabTelemetryStatement<>(statement, nabDbInfo, nabInstrumenter);
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    Statement statement = delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    return new NabTelemetryStatement<>(statement, nabDbInfo, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql, resultSetType, resultSetConcurrency);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql, autoGeneratedKeys);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql, columnIndexes);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    PreparedStatement statement = delegate.prepareStatement(sql, columnNames);
    return new NabTelemetryPreparedStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public CallableStatement prepareCall(String sql) throws SQLException {
    CallableStatement statement = delegate.prepareCall(sql);
    return new NabTelemetryCallableStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    CallableStatement statement = delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
    return new NabTelemetryCallableStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    CallableStatement statement = delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    return new NabTelemetryCallableStatement<>(statement, nabDbInfo, sql, nabInstrumenter);
  }
}
